; File di configurazione per il logger.
; rcs_logger ha 3 handler: console, file e email.
; Email viene utilizzato solo per gli errori. 
; Console e file sempre.
; Esempi di utizzo si trovano in usage.py queue_log_from_ini()
[loggers]
keys = root, rcs_logger

[handlers]
keys = console, file,  queue

[formatters]
keys = default, complete

[logger_root]
level = DEBUG
handlers = console, file
qualname = root

[logger_rcs_logger]
level=DEBUG
handlers=file,console,queue
qualname=rcs_logger
propagate=0

[handler_console]
class = StreamHandler
level = INFO
formatter = default
args = (sys.stdout,)

[handler_file]
class = FileHandler
level = INFO
formatter = default
args = (__import__("datetime").datetime.now().strftime(__import__("os").getcwd()+r"/logs"+'/%%Y-%%m_main.log'), 'a')

[handler_queue]
class=logging.handlers.QueueHandler
level=DEBUG
formatter=default
args=(__import__("queue").Queue(-1),)

[formatter_complete]
format={"observed_timestamp": %(observedTime)d, "observed_timestamp_rfc3339": "%(observedTimeRfc3339)s", "intrumentation_scope": "%(filename)s", "hostname": "%(hostname)s", "severity_text": "%(levelname)s","severity_number": %(levelno)s, "event_timestamp": %(eventTime)s, "body": "%(message)s", "resource": "%(node)s",  "span_id": "%(spanId)s", "trace_id": "%(traceId)s"}
datefmt=%s

[formatter_default]
format = %(asctime)s - %(levelname)s - %(message)s